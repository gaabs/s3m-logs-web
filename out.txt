<Buffer 70 61 63 6b 61 67 65 20 6f 72 67 2e 61 74 6d 6f 73 70 68 65 72 65 2e 63 70 72 3b 0a 0a 69 6d 70 6f 72 74 20 6f 72 67 2e 61 74 6d 6f 73 70 68 65 72 65 ... >
<p>'s Pug source code!</p><details><summary>Case X - </summary><p>some observations</p><p>some more observations</p><p>result is<b>ok</b></p><table><tr><tr><td>base</td><td>left</td><td>right</td></tr><td><details><summary>Base</summary><pre class="prettyprint"><code></code></pre></details></td><td><details><summary>Left</summary><pre class="prettyprint"><code>package org.atmosphere.cpr;

import org.atmosphere.cpr.AtmosphereServlet.Action;
import org.atmosphere.cpr.AtmosphereServlet.AtmosphereConfig;
import org.atmosphere.cpr.AtmosphereServlet.AtmosphereHandlerWrapper;

import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import static org.atmosphere.cpr.ApplicationConfig.MAX_INACTIVE;
import static org.atmosphere.cpr.HeaderConfig.X_ATMOSPHERE_ERROR;

/**
 * Base class which implement the semantics of suspending and resuming of a
 * Comet Request.
 *
 * @author Jeanfrancois Arcand
 */
public abstract class AsynchronousProcessor implements CometSupport&amp;lt;AtmosphereResourceImpl&amp;gt; {

    private static final Logger logger = LoggerFactory.getLogger(AsynchronousProcessor.class);
</code></pre></details></td><td><details><summary>Right</summary><pre class="prettyprint"><code></code></pre></details></td><td><details><summary>MergeMethods</summary><pre class="prettyprint"><code></code></pre></details></td><td><details><summary>KeepBothMethods</summary><pre class="prettyprint"><code></code></pre></details></td><td><details><summary>Safe</summary><pre class="prettyprint"><code></code></pre></details></td><td><details><summary>Unstructured</summary><pre class="prettyprint"><code></code></pre></details></td></tr></table></details>
